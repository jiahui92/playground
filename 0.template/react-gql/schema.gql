### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AggregateCity {
  _avg: CityAvgAggregateOutputType
  _count: CityCountAggregateOutputType
  _max: CityMaxAggregateOutputType
  _min: CityMinAggregateOutputType
  _sum: CitySumAggregateOutputType
}

type AggregateCountry {
  _avg: CountryAvgAggregateOutputType
  _count: CountryCountAggregateOutputType
  _max: CountryMaxAggregateOutputType
  _min: CountryMinAggregateOutputType
  _sum: CountrySumAggregateOutputType
}

type AggregateCountryLanguage {
  _avg: CountryLanguageAvgAggregateOutputType
  _count: CountryLanguageCountAggregateOutputType
  _max: CountryLanguageMaxAggregateOutputType
  _min: CountryLanguageMinAggregateOutputType
  _sum: CountryLanguageSumAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The `Byte` scalar type represents byte value as a Buffer
"""
scalar Bytes

type City {
  country: Country!
  countryCode: String!
  district: String!
  id: Int!
  name: String!
  population: Int!
}

type CityAvgAggregateOutputType {
  id: Float
  population: Float
}

input CityAvgOrderByAggregateInput {
  id: SortOrder
  population: SortOrder
}

type CityCountAggregateOutputType {
  _all: Int!
  countryCode: Int!
  district: Int!
  id: Int!
  name: Int!
  population: Int!
}

input CityCountOrderByAggregateInput {
  countryCode: SortOrder
  district: SortOrder
  id: SortOrder
  name: SortOrder
  population: SortOrder
}

input CityCreateInput {
  country: CountryCreateNestedOneWithoutCityInput!
  district: String!
  name: String!
  population: Int
}

input CityCreateManyCountryInput {
  district: String!
  id: Int
  name: String!
  population: Int
}

input CityCreateManyCountryInputEnvelope {
  data: CityCreateManyCountryInput!
  skipDuplicates: Boolean
}

input CityCreateManyInput {
  countryCode: String!
  district: String!
  id: Int
  name: String!
  population: Int
}

input CityCreateNestedManyWithoutCountryInput {
  connect: [CityWhereUniqueInput]
  connectOrCreate: [CityCreateOrConnectWithoutCountryInput]
  create: [CityCreateWithoutCountryInput]
  createMany: CityCreateManyCountryInputEnvelope
}

input CityCreateOrConnectWithoutCountryInput {
  create: CityCreateWithoutCountryInput!
  where: CityWhereUniqueInput!
}

input CityCreateWithoutCountryInput {
  district: String!
  name: String!
  population: Int
}

type CityGroupByOutputType {
  _avg: CityAvgAggregateOutputType
  _count: CityCountAggregateOutputType
  _max: CityMaxAggregateOutputType
  _min: CityMinAggregateOutputType
  _sum: CitySumAggregateOutputType
  countryCode: String!
  district: String!
  id: Int!
  name: String!
  population: Int!
}

input CityListRelationFilter {
  every: CityWhereInput
  none: CityWhereInput
  some: CityWhereInput
}

type CityMaxAggregateOutputType {
  countryCode: String
  district: String
  id: Int
  name: String
  population: Int
}

input CityMaxOrderByAggregateInput {
  countryCode: SortOrder
  district: SortOrder
  id: SortOrder
  name: SortOrder
  population: SortOrder
}

type CityMinAggregateOutputType {
  countryCode: String
  district: String
  id: Int
  name: String
  population: Int
}

input CityMinOrderByAggregateInput {
  countryCode: SortOrder
  district: SortOrder
  id: SortOrder
  name: SortOrder
  population: SortOrder
}

input CityOrderByRelationAggregateInput {
  _count: SortOrder
}

input CityOrderByWithAggregationInput {
  _avg: CityAvgOrderByAggregateInput
  _count: CityCountOrderByAggregateInput
  _max: CityMaxOrderByAggregateInput
  _min: CityMinOrderByAggregateInput
  _sum: CitySumOrderByAggregateInput
  countryCode: SortOrder
  district: SortOrder
  id: SortOrder
  name: SortOrder
  population: SortOrder
}

input CityOrderByWithRelationInput {
  country: CountryOrderByWithRelationInput
  countryCode: SortOrder
  district: SortOrder
  id: SortOrder
  name: SortOrder
  population: SortOrder
}

enum CityScalarFieldEnum {
  countryCode
  district
  id
  name
  population
}

input CityScalarWhereInput {
  AND: [CityScalarWhereInput]
  NOT: [CityScalarWhereInput]
  OR: [CityScalarWhereInput]
  countryCode: StringFilter
  district: StringFilter
  id: IntFilter
  name: StringFilter
  population: IntFilter
}

input CityScalarWhereWithAggregatesInput {
  AND: [CityScalarWhereWithAggregatesInput]
  NOT: [CityScalarWhereWithAggregatesInput]
  OR: [CityScalarWhereWithAggregatesInput]
  countryCode: StringWithAggregatesFilter
  district: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  population: IntWithAggregatesFilter
}

type CitySumAggregateOutputType {
  id: Int
  population: Int
}

input CitySumOrderByAggregateInput {
  id: SortOrder
  population: SortOrder
}

input CityUncheckedCreateInput {
  countryCode: String!
  district: String!
  id: Int
  name: String!
  population: Int
}

input CityUncheckedCreateNestedManyWithoutCountryInput {
  connect: [CityWhereUniqueInput]
  connectOrCreate: [CityCreateOrConnectWithoutCountryInput]
  create: [CityCreateWithoutCountryInput]
  createMany: CityCreateManyCountryInputEnvelope
}

input CityUncheckedCreateWithoutCountryInput {
  district: String!
  id: Int
  name: String!
  population: Int
}

input CityUncheckedUpdateInput {
  countryCode: StringFieldUpdateOperationsInput
  district: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
}

input CityUncheckedUpdateManyInput {
  countryCode: StringFieldUpdateOperationsInput
  district: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
}

input CityUncheckedUpdateManyWithoutCountryInput {
  district: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
}

input CityUncheckedUpdateManyWithoutCountryNestedInput {
  connect: [CityWhereUniqueInput]
  connectOrCreate: [CityCreateOrConnectWithoutCountryInput]
  create: [CityCreateWithoutCountryInput]
  createMany: CityCreateManyCountryInputEnvelope
  delete: [CityWhereUniqueInput]
  deleteMany: [CityScalarWhereInput]
  disconnect: [CityWhereUniqueInput]
  set: [CityWhereUniqueInput]
  update: [CityUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [CityUpdateManyWithWhereWithoutCountryInput]
  upsert: [CityUpsertWithWhereUniqueWithoutCountryInput]
}

input CityUncheckedUpdateWithoutCountryInput {
  district: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
}

input CityUpdateInput {
  country: CountryUpdateOneRequiredWithoutCityNestedInput
  district: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
}

input CityUpdateManyMutationInput {
  district: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
}

input CityUpdateManyWithWhereWithoutCountryInput {
  data: CityUpdateManyMutationInput!
  where: CityScalarWhereInput!
}

input CityUpdateManyWithoutCountryNestedInput {
  connect: [CityWhereUniqueInput]
  connectOrCreate: [CityCreateOrConnectWithoutCountryInput]
  create: [CityCreateWithoutCountryInput]
  createMany: CityCreateManyCountryInputEnvelope
  delete: [CityWhereUniqueInput]
  deleteMany: [CityScalarWhereInput]
  disconnect: [CityWhereUniqueInput]
  set: [CityWhereUniqueInput]
  update: [CityUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [CityUpdateManyWithWhereWithoutCountryInput]
  upsert: [CityUpsertWithWhereUniqueWithoutCountryInput]
}

input CityUpdateWithWhereUniqueWithoutCountryInput {
  data: CityUpdateWithoutCountryInput!
  where: CityWhereUniqueInput!
}

input CityUpdateWithoutCountryInput {
  district: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
}

input CityUpsertWithWhereUniqueWithoutCountryInput {
  create: CityCreateWithoutCountryInput!
  update: CityUpdateWithoutCountryInput!
  where: CityWhereUniqueInput!
}

input CityWhereInput {
  AND: [CityWhereInput]
  NOT: [CityWhereInput]
  OR: [CityWhereInput]
  country: CountryRelationFilter
  countryCode: StringFilter
  district: StringFilter
  id: IntFilter
  name: StringFilter
  population: IntFilter
}

input CityWhereUniqueInput {
  AND: [CityWhereInput]
  NOT: [CityWhereInput]
  OR: [CityWhereInput]
  country: CountryRelationFilter
  countryCode: StringFilter
  district: StringFilter
  id: Int
  name: StringFilter
  population: IntFilter
}

type Country {
  _count: CountryCountOutputType!
  capital: Int
  city(
    cursor: CityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [CityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: CityWhereInput
  ): [City!]!
  code: String!
  code2: String!
  continent: CountryContinent!
  countryLanguage(
    cursor: CountryLanguageWhereUniqueInput
    distinct: [CountryLanguageScalarFieldEnum]
    orderBy: [CountryLanguageOrderByWithRelationInput]
    skip: Int
    take: Int
    where: CountryLanguageWhereInput
  ): [CountryLanguage!]!
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int!
  region: String!
  surfaceArea: Decimal!
}

type CountryAvgAggregateOutputType {
  capital: Float
  gnp: Decimal
  gnpoId: Decimal
  indepYear: Float
  lifeExpectancy: Decimal
  population: Float
  surfaceArea: Decimal
}

input CountryAvgOrderByAggregateInput {
  capital: SortOrder
  gnp: SortOrder
  gnpoId: SortOrder
  indepYear: SortOrder
  lifeExpectancy: SortOrder
  population: SortOrder
  surfaceArea: SortOrder
}

enum CountryContinent {
  Africa
  Antarctica
  Asia
  Europe
  North_America
  Oceania
  South_America
}

type CountryCountAggregateOutputType {
  _all: Int!
  capital: Int!
  code: Int!
  code2: Int!
  continent: Int!
  gnp: Int!
  gnpoId: Int!
  governmentForm: Int!
  headOfState: Int!
  indepYear: Int!
  lifeExpectancy: Int!
  localName: Int!
  name: Int!
  population: Int!
  region: Int!
  surfaceArea: Int!
}

input CountryCountOrderByAggregateInput {
  capital: SortOrder
  code: SortOrder
  code2: SortOrder
  continent: SortOrder
  gnp: SortOrder
  gnpoId: SortOrder
  governmentForm: SortOrder
  headOfState: SortOrder
  indepYear: SortOrder
  lifeExpectancy: SortOrder
  localName: SortOrder
  name: SortOrder
  population: SortOrder
  region: SortOrder
  surfaceArea: SortOrder
}

type CountryCountOutputType {
  city: Int!
  countryLanguage: Int!
}

input CountryCreateInput {
  capital: Int
  city: CityCreateNestedManyWithoutCountryInput
  code: String!
  code2: String!
  continent: CountryContinent
  countryLanguage: CountryLanguageCreateNestedManyWithoutCountryInput
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int
  region: String!
  surfaceArea: Decimal
}

input CountryCreateManyInput {
  capital: Int
  code: String!
  code2: String!
  continent: CountryContinent
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int
  region: String!
  surfaceArea: Decimal
}

input CountryCreateNestedOneWithoutCityInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutCityInput
  create: CountryCreateWithoutCityInput
}

input CountryCreateNestedOneWithoutCountryLanguageInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutCountryLanguageInput
  create: CountryCreateWithoutCountryLanguageInput
}

input CountryCreateOrConnectWithoutCityInput {
  create: CountryCreateWithoutCityInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateOrConnectWithoutCountryLanguageInput {
  create: CountryCreateWithoutCountryLanguageInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateWithoutCityInput {
  capital: Int
  code: String!
  code2: String!
  continent: CountryContinent
  countryLanguage: CountryLanguageCreateNestedManyWithoutCountryInput
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int
  region: String!
  surfaceArea: Decimal
}

input CountryCreateWithoutCountryLanguageInput {
  capital: Int
  city: CityCreateNestedManyWithoutCountryInput
  code: String!
  code2: String!
  continent: CountryContinent
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int
  region: String!
  surfaceArea: Decimal
}

type CountryGroupByOutputType {
  _avg: CountryAvgAggregateOutputType
  _count: CountryCountAggregateOutputType
  _max: CountryMaxAggregateOutputType
  _min: CountryMinAggregateOutputType
  _sum: CountrySumAggregateOutputType
  capital: Int
  code: String!
  code2: String!
  continent: CountryContinent!
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int!
  region: String!
  surfaceArea: Decimal!
}

type CountryLanguage {
  country: Country!
  countryCode: String!
  isOfficial: CountryLanguageIsOfficial!
  language: String!
  percentage: Decimal!
}

type CountryLanguageAvgAggregateOutputType {
  percentage: Decimal
}

input CountryLanguageAvgOrderByAggregateInput {
  percentage: SortOrder
}

type CountryLanguageCountAggregateOutputType {
  _all: Int!
  countryCode: Int!
  isOfficial: Int!
  language: Int!
  percentage: Int!
}

input CountryLanguageCountOrderByAggregateInput {
  countryCode: SortOrder
  isOfficial: SortOrder
  language: SortOrder
  percentage: SortOrder
}

input CountryLanguageCountryCodeLanguageCompoundUniqueInput {
  countryCode: String!
  language: String!
}

input CountryLanguageCreateInput {
  country: CountryCreateNestedOneWithoutCountryLanguageInput!
  isOfficial: CountryLanguageIsOfficial
  language: String!
  percentage: Decimal
}

input CountryLanguageCreateManyCountryInput {
  isOfficial: CountryLanguageIsOfficial
  language: String!
  percentage: Decimal
}

input CountryLanguageCreateManyCountryInputEnvelope {
  data: CountryLanguageCreateManyCountryInput!
  skipDuplicates: Boolean
}

input CountryLanguageCreateManyInput {
  countryCode: String!
  isOfficial: CountryLanguageIsOfficial
  language: String!
  percentage: Decimal
}

input CountryLanguageCreateNestedManyWithoutCountryInput {
  connect: [CountryLanguageWhereUniqueInput]
  connectOrCreate: [CountryLanguageCreateOrConnectWithoutCountryInput]
  create: [CountryLanguageCreateWithoutCountryInput]
  createMany: CountryLanguageCreateManyCountryInputEnvelope
}

input CountryLanguageCreateOrConnectWithoutCountryInput {
  create: CountryLanguageCreateWithoutCountryInput!
  where: CountryLanguageWhereUniqueInput!
}

input CountryLanguageCreateWithoutCountryInput {
  isOfficial: CountryLanguageIsOfficial
  language: String!
  percentage: Decimal
}

type CountryLanguageGroupByOutputType {
  _avg: CountryLanguageAvgAggregateOutputType
  _count: CountryLanguageCountAggregateOutputType
  _max: CountryLanguageMaxAggregateOutputType
  _min: CountryLanguageMinAggregateOutputType
  _sum: CountryLanguageSumAggregateOutputType
  countryCode: String!
  isOfficial: CountryLanguageIsOfficial!
  language: String!
  percentage: Decimal!
}

enum CountryLanguageIsOfficial {
  F
  T
}

input CountryLanguageListRelationFilter {
  every: CountryLanguageWhereInput
  none: CountryLanguageWhereInput
  some: CountryLanguageWhereInput
}

type CountryLanguageMaxAggregateOutputType {
  countryCode: String
  isOfficial: CountryLanguageIsOfficial
  language: String
  percentage: Decimal
}

input CountryLanguageMaxOrderByAggregateInput {
  countryCode: SortOrder
  isOfficial: SortOrder
  language: SortOrder
  percentage: SortOrder
}

type CountryLanguageMinAggregateOutputType {
  countryCode: String
  isOfficial: CountryLanguageIsOfficial
  language: String
  percentage: Decimal
}

input CountryLanguageMinOrderByAggregateInput {
  countryCode: SortOrder
  isOfficial: SortOrder
  language: SortOrder
  percentage: SortOrder
}

input CountryLanguageOrderByRelationAggregateInput {
  _count: SortOrder
}

input CountryLanguageOrderByWithAggregationInput {
  _avg: CountryLanguageAvgOrderByAggregateInput
  _count: CountryLanguageCountOrderByAggregateInput
  _max: CountryLanguageMaxOrderByAggregateInput
  _min: CountryLanguageMinOrderByAggregateInput
  _sum: CountryLanguageSumOrderByAggregateInput
  countryCode: SortOrder
  isOfficial: SortOrder
  language: SortOrder
  percentage: SortOrder
}

input CountryLanguageOrderByWithRelationInput {
  country: CountryOrderByWithRelationInput
  countryCode: SortOrder
  isOfficial: SortOrder
  language: SortOrder
  percentage: SortOrder
}

enum CountryLanguageScalarFieldEnum {
  countryCode
  isOfficial
  language
  percentage
}

input CountryLanguageScalarWhereInput {
  AND: [CountryLanguageScalarWhereInput]
  NOT: [CountryLanguageScalarWhereInput]
  OR: [CountryLanguageScalarWhereInput]
  countryCode: StringFilter
  isOfficial: EnumCountryLanguageIsOfficialFilter
  language: StringFilter
  percentage: DecimalFilter
}

input CountryLanguageScalarWhereWithAggregatesInput {
  AND: [CountryLanguageScalarWhereWithAggregatesInput]
  NOT: [CountryLanguageScalarWhereWithAggregatesInput]
  OR: [CountryLanguageScalarWhereWithAggregatesInput]
  countryCode: StringWithAggregatesFilter
  isOfficial: EnumCountryLanguageIsOfficialWithAggregatesFilter
  language: StringWithAggregatesFilter
  percentage: DecimalWithAggregatesFilter
}

type CountryLanguageSumAggregateOutputType {
  percentage: Decimal
}

input CountryLanguageSumOrderByAggregateInput {
  percentage: SortOrder
}

input CountryLanguageUncheckedCreateInput {
  countryCode: String!
  isOfficial: CountryLanguageIsOfficial
  language: String!
  percentage: Decimal
}

input CountryLanguageUncheckedCreateNestedManyWithoutCountryInput {
  connect: [CountryLanguageWhereUniqueInput]
  connectOrCreate: [CountryLanguageCreateOrConnectWithoutCountryInput]
  create: [CountryLanguageCreateWithoutCountryInput]
  createMany: CountryLanguageCreateManyCountryInputEnvelope
}

input CountryLanguageUncheckedCreateWithoutCountryInput {
  isOfficial: CountryLanguageIsOfficial
  language: String!
  percentage: Decimal
}

input CountryLanguageUncheckedUpdateInput {
  countryCode: StringFieldUpdateOperationsInput
  isOfficial: EnumCountryLanguageIsOfficialFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  percentage: DecimalFieldUpdateOperationsInput
}

input CountryLanguageUncheckedUpdateManyInput {
  countryCode: StringFieldUpdateOperationsInput
  isOfficial: EnumCountryLanguageIsOfficialFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  percentage: DecimalFieldUpdateOperationsInput
}

input CountryLanguageUncheckedUpdateManyWithoutCountryInput {
  isOfficial: EnumCountryLanguageIsOfficialFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  percentage: DecimalFieldUpdateOperationsInput
}

input CountryLanguageUncheckedUpdateManyWithoutCountryNestedInput {
  connect: [CountryLanguageWhereUniqueInput]
  connectOrCreate: [CountryLanguageCreateOrConnectWithoutCountryInput]
  create: [CountryLanguageCreateWithoutCountryInput]
  createMany: CountryLanguageCreateManyCountryInputEnvelope
  delete: [CountryLanguageWhereUniqueInput]
  deleteMany: [CountryLanguageScalarWhereInput]
  disconnect: [CountryLanguageWhereUniqueInput]
  set: [CountryLanguageWhereUniqueInput]
  update: [CountryLanguageUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [CountryLanguageUpdateManyWithWhereWithoutCountryInput]
  upsert: [CountryLanguageUpsertWithWhereUniqueWithoutCountryInput]
}

input CountryLanguageUncheckedUpdateWithoutCountryInput {
  isOfficial: EnumCountryLanguageIsOfficialFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  percentage: DecimalFieldUpdateOperationsInput
}

input CountryLanguageUpdateInput {
  country: CountryUpdateOneRequiredWithoutCountryLanguageNestedInput
  isOfficial: EnumCountryLanguageIsOfficialFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  percentage: DecimalFieldUpdateOperationsInput
}

input CountryLanguageUpdateManyMutationInput {
  isOfficial: EnumCountryLanguageIsOfficialFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  percentage: DecimalFieldUpdateOperationsInput
}

input CountryLanguageUpdateManyWithWhereWithoutCountryInput {
  data: CountryLanguageUpdateManyMutationInput!
  where: CountryLanguageScalarWhereInput!
}

input CountryLanguageUpdateManyWithoutCountryNestedInput {
  connect: [CountryLanguageWhereUniqueInput]
  connectOrCreate: [CountryLanguageCreateOrConnectWithoutCountryInput]
  create: [CountryLanguageCreateWithoutCountryInput]
  createMany: CountryLanguageCreateManyCountryInputEnvelope
  delete: [CountryLanguageWhereUniqueInput]
  deleteMany: [CountryLanguageScalarWhereInput]
  disconnect: [CountryLanguageWhereUniqueInput]
  set: [CountryLanguageWhereUniqueInput]
  update: [CountryLanguageUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [CountryLanguageUpdateManyWithWhereWithoutCountryInput]
  upsert: [CountryLanguageUpsertWithWhereUniqueWithoutCountryInput]
}

input CountryLanguageUpdateWithWhereUniqueWithoutCountryInput {
  data: CountryLanguageUpdateWithoutCountryInput!
  where: CountryLanguageWhereUniqueInput!
}

input CountryLanguageUpdateWithoutCountryInput {
  isOfficial: EnumCountryLanguageIsOfficialFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  percentage: DecimalFieldUpdateOperationsInput
}

input CountryLanguageUpsertWithWhereUniqueWithoutCountryInput {
  create: CountryLanguageCreateWithoutCountryInput!
  update: CountryLanguageUpdateWithoutCountryInput!
  where: CountryLanguageWhereUniqueInput!
}

input CountryLanguageWhereInput {
  AND: [CountryLanguageWhereInput]
  NOT: [CountryLanguageWhereInput]
  OR: [CountryLanguageWhereInput]
  country: CountryRelationFilter
  countryCode: StringFilter
  isOfficial: EnumCountryLanguageIsOfficialFilter
  language: StringFilter
  percentage: DecimalFilter
}

input CountryLanguageWhereUniqueInput {
  AND: [CountryLanguageWhereInput]
  NOT: [CountryLanguageWhereInput]
  OR: [CountryLanguageWhereInput]
  country: CountryRelationFilter
  countryCode: StringFilter
  countryCode_language: CountryLanguageCountryCodeLanguageCompoundUniqueInput
  isOfficial: EnumCountryLanguageIsOfficialFilter
  language: StringFilter
  percentage: DecimalFilter
}

type CountryMaxAggregateOutputType {
  capital: Int
  code: String
  code2: String
  continent: CountryContinent
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String
  name: String
  population: Int
  region: String
  surfaceArea: Decimal
}

input CountryMaxOrderByAggregateInput {
  capital: SortOrder
  code: SortOrder
  code2: SortOrder
  continent: SortOrder
  gnp: SortOrder
  gnpoId: SortOrder
  governmentForm: SortOrder
  headOfState: SortOrder
  indepYear: SortOrder
  lifeExpectancy: SortOrder
  localName: SortOrder
  name: SortOrder
  population: SortOrder
  region: SortOrder
  surfaceArea: SortOrder
}

type CountryMinAggregateOutputType {
  capital: Int
  code: String
  code2: String
  continent: CountryContinent
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String
  name: String
  population: Int
  region: String
  surfaceArea: Decimal
}

input CountryMinOrderByAggregateInput {
  capital: SortOrder
  code: SortOrder
  code2: SortOrder
  continent: SortOrder
  gnp: SortOrder
  gnpoId: SortOrder
  governmentForm: SortOrder
  headOfState: SortOrder
  indepYear: SortOrder
  lifeExpectancy: SortOrder
  localName: SortOrder
  name: SortOrder
  population: SortOrder
  region: SortOrder
  surfaceArea: SortOrder
}

input CountryOrderByWithAggregationInput {
  _avg: CountryAvgOrderByAggregateInput
  _count: CountryCountOrderByAggregateInput
  _max: CountryMaxOrderByAggregateInput
  _min: CountryMinOrderByAggregateInput
  _sum: CountrySumOrderByAggregateInput
  capital: SortOrderInput
  code: SortOrder
  code2: SortOrder
  continent: SortOrder
  gnp: SortOrderInput
  gnpoId: SortOrderInput
  governmentForm: SortOrder
  headOfState: SortOrderInput
  indepYear: SortOrderInput
  lifeExpectancy: SortOrderInput
  localName: SortOrder
  name: SortOrder
  population: SortOrder
  region: SortOrder
  surfaceArea: SortOrder
}

input CountryOrderByWithRelationInput {
  capital: SortOrderInput
  city: CityOrderByRelationAggregateInput
  code: SortOrder
  code2: SortOrder
  continent: SortOrder
  countryLanguage: CountryLanguageOrderByRelationAggregateInput
  gnp: SortOrderInput
  gnpoId: SortOrderInput
  governmentForm: SortOrder
  headOfState: SortOrderInput
  indepYear: SortOrderInput
  lifeExpectancy: SortOrderInput
  localName: SortOrder
  name: SortOrder
  population: SortOrder
  region: SortOrder
  surfaceArea: SortOrder
}

input CountryRelationFilter {
  is: CountryWhereInput
  isNot: CountryWhereInput
}

enum CountryScalarFieldEnum {
  capital
  code
  code2
  continent
  gnp
  gnpoId
  governmentForm
  headOfState
  indepYear
  lifeExpectancy
  localName
  name
  population
  region
  surfaceArea
}

input CountryScalarWhereWithAggregatesInput {
  AND: [CountryScalarWhereWithAggregatesInput]
  NOT: [CountryScalarWhereWithAggregatesInput]
  OR: [CountryScalarWhereWithAggregatesInput]
  capital: IntNullableWithAggregatesFilter
  code: StringWithAggregatesFilter
  code2: StringWithAggregatesFilter
  continent: EnumCountryContinentWithAggregatesFilter
  gnp: DecimalNullableWithAggregatesFilter
  gnpoId: DecimalNullableWithAggregatesFilter
  governmentForm: StringWithAggregatesFilter
  headOfState: StringNullableWithAggregatesFilter
  indepYear: IntNullableWithAggregatesFilter
  lifeExpectancy: DecimalNullableWithAggregatesFilter
  localName: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  population: IntWithAggregatesFilter
  region: StringWithAggregatesFilter
  surfaceArea: DecimalWithAggregatesFilter
}

type CountrySumAggregateOutputType {
  capital: Int
  gnp: Decimal
  gnpoId: Decimal
  indepYear: Int
  lifeExpectancy: Decimal
  population: Int
  surfaceArea: Decimal
}

input CountrySumOrderByAggregateInput {
  capital: SortOrder
  gnp: SortOrder
  gnpoId: SortOrder
  indepYear: SortOrder
  lifeExpectancy: SortOrder
  population: SortOrder
  surfaceArea: SortOrder
}

input CountryUncheckedCreateInput {
  capital: Int
  city: CityUncheckedCreateNestedManyWithoutCountryInput
  code: String!
  code2: String!
  continent: CountryContinent
  countryLanguage: CountryLanguageUncheckedCreateNestedManyWithoutCountryInput
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int
  region: String!
  surfaceArea: Decimal
}

input CountryUncheckedCreateWithoutCityInput {
  capital: Int
  code: String!
  code2: String!
  continent: CountryContinent
  countryLanguage: CountryLanguageUncheckedCreateNestedManyWithoutCountryInput
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int
  region: String!
  surfaceArea: Decimal
}

input CountryUncheckedCreateWithoutCountryLanguageInput {
  capital: Int
  city: CityUncheckedCreateNestedManyWithoutCountryInput
  code: String!
  code2: String!
  continent: CountryContinent
  gnp: Decimal
  gnpoId: Decimal
  governmentForm: String!
  headOfState: String
  indepYear: Int
  lifeExpectancy: Decimal
  localName: String!
  name: String!
  population: Int
  region: String!
  surfaceArea: Decimal
}

input CountryUncheckedUpdateInput {
  capital: NullableIntFieldUpdateOperationsInput
  city: CityUncheckedUpdateManyWithoutCountryNestedInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  countryLanguage: CountryLanguageUncheckedUpdateManyWithoutCountryNestedInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUncheckedUpdateManyInput {
  capital: NullableIntFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUncheckedUpdateWithoutCityInput {
  capital: NullableIntFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  countryLanguage: CountryLanguageUncheckedUpdateManyWithoutCountryNestedInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUncheckedUpdateWithoutCountryLanguageInput {
  capital: NullableIntFieldUpdateOperationsInput
  city: CityUncheckedUpdateManyWithoutCountryNestedInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUpdateInput {
  capital: NullableIntFieldUpdateOperationsInput
  city: CityUpdateManyWithoutCountryNestedInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  countryLanguage: CountryLanguageUpdateManyWithoutCountryNestedInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUpdateManyMutationInput {
  capital: NullableIntFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUpdateOneRequiredWithoutCityNestedInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutCityInput
  create: CountryCreateWithoutCityInput
  update: CountryUpdateToOneWithWhereWithoutCityInput
  upsert: CountryUpsertWithoutCityInput
}

input CountryUpdateOneRequiredWithoutCountryLanguageNestedInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutCountryLanguageInput
  create: CountryCreateWithoutCountryLanguageInput
  update: CountryUpdateToOneWithWhereWithoutCountryLanguageInput
  upsert: CountryUpsertWithoutCountryLanguageInput
}

input CountryUpdateToOneWithWhereWithoutCityInput {
  data: CountryUpdateWithoutCityInput!
  where: CountryWhereInput
}

input CountryUpdateToOneWithWhereWithoutCountryLanguageInput {
  data: CountryUpdateWithoutCountryLanguageInput!
  where: CountryWhereInput
}

input CountryUpdateWithoutCityInput {
  capital: NullableIntFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  countryLanguage: CountryLanguageUpdateManyWithoutCountryNestedInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUpdateWithoutCountryLanguageInput {
  capital: NullableIntFieldUpdateOperationsInput
  city: CityUpdateManyWithoutCountryNestedInput
  code: StringFieldUpdateOperationsInput
  code2: StringFieldUpdateOperationsInput
  continent: EnumCountryContinentFieldUpdateOperationsInput
  gnp: NullableDecimalFieldUpdateOperationsInput
  gnpoId: NullableDecimalFieldUpdateOperationsInput
  governmentForm: StringFieldUpdateOperationsInput
  headOfState: NullableStringFieldUpdateOperationsInput
  indepYear: NullableIntFieldUpdateOperationsInput
  lifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  localName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  population: IntFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  surfaceArea: DecimalFieldUpdateOperationsInput
}

input CountryUpsertWithoutCityInput {
  create: CountryCreateWithoutCityInput!
  update: CountryUpdateWithoutCityInput!
  where: CountryWhereInput
}

input CountryUpsertWithoutCountryLanguageInput {
  create: CountryCreateWithoutCountryLanguageInput!
  update: CountryUpdateWithoutCountryLanguageInput!
  where: CountryWhereInput
}

input CountryWhereInput {
  AND: [CountryWhereInput]
  NOT: [CountryWhereInput]
  OR: [CountryWhereInput]
  capital: IntNullableFilter
  city: CityListRelationFilter
  code: StringFilter
  code2: StringFilter
  continent: EnumCountryContinentFilter
  countryLanguage: CountryLanguageListRelationFilter
  gnp: DecimalNullableFilter
  gnpoId: DecimalNullableFilter
  governmentForm: StringFilter
  headOfState: StringNullableFilter
  indepYear: IntNullableFilter
  lifeExpectancy: DecimalNullableFilter
  localName: StringFilter
  name: StringFilter
  population: IntFilter
  region: StringFilter
  surfaceArea: DecimalFilter
}

input CountryWhereUniqueInput {
  AND: [CountryWhereInput]
  NOT: [CountryWhereInput]
  OR: [CountryWhereInput]
  capital: IntNullableFilter
  city: CityListRelationFilter
  code: String
  code2: StringFilter
  continent: EnumCountryContinentFilter
  countryLanguage: CountryLanguageListRelationFilter
  gnp: DecimalNullableFilter
  gnpoId: DecimalNullableFilter
  governmentForm: StringFilter
  headOfState: StringNullableFilter
  indepYear: IntNullableFilter
  lifeExpectancy: DecimalNullableFilter
  localName: StringFilter
  name: StringFilter
  population: IntFilter
  region: StringFilter
  surfaceArea: DecimalFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""
An arbitrary-precision Decimal type
"""
scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal]
}

input DecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal]
}

input DecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal]
}

input EnumCountryContinentFieldUpdateOperationsInput {
  set: CountryContinent
}

input EnumCountryContinentFilter {
  equals: CountryContinent
  in: [CountryContinent]
  not: NestedEnumCountryContinentFilter
  notIn: [CountryContinent]
}

input EnumCountryContinentWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumCountryContinentFilter
  _min: NestedEnumCountryContinentFilter
  equals: CountryContinent
  in: [CountryContinent]
  not: NestedEnumCountryContinentWithAggregatesFilter
  notIn: [CountryContinent]
}

input EnumCountryLanguageIsOfficialFieldUpdateOperationsInput {
  set: CountryLanguageIsOfficial
}

input EnumCountryLanguageIsOfficialFilter {
  equals: CountryLanguageIsOfficial
  in: [CountryLanguageIsOfficial]
  not: NestedEnumCountryLanguageIsOfficialFilter
  notIn: [CountryLanguageIsOfficial]
}

input EnumCountryLanguageIsOfficialWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumCountryLanguageIsOfficialFilter
  _min: NestedEnumCountryLanguageIsOfficialFilter
  equals: CountryLanguageIsOfficial
  in: [CountryLanguageIsOfficial]
  not: NestedEnumCountryLanguageIsOfficialWithAggregatesFilter
  notIn: [CountryLanguageIsOfficial]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

input JsonFilter {
  array_contains: Json
  array_ends_with: Json
  array_starts_with: Json
  equals: Json
  gt: Json
  gte: Json
  lt: Json
  lte: Json
  not: Json
  path: String
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

enum JsonNullValueFilter {
  AnyNull
  DbNull
  JsonNull
}

enum JsonNullValueInput {
  JsonNull
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: Json
  array_ends_with: Json
  array_starts_with: Json
  equals: Json
  gt: Json
  gte: Json
  lt: Json
  lte: Json
  not: Json
  path: String
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Mutation {
  createOneCity(data: CityCreateInput!): City!
  createOneUser(data: UserCreateInput!): User!
  deleteManyCity(where: CityWhereInput): BatchPayload!
  deleteOneCity(where: CityWhereUniqueInput!): City
  updateManyCity(
    data: CityUpdateManyMutationInput!
    where: CityWhereInput
  ): BatchPayload!
  updateOneCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City!
  upsertOneCity(
    create: CityCreateInput!
    update: CityUpdateInput!
    where: CityWhereUniqueInput!
  ): City!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal]
}

input NestedDecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal]
}

input NestedDecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal]
}

input NestedEnumCountryContinentFilter {
  equals: CountryContinent
  in: [CountryContinent]
  not: NestedEnumCountryContinentFilter
  notIn: [CountryContinent]
}

input NestedEnumCountryContinentWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumCountryContinentFilter
  _min: NestedEnumCountryContinentFilter
  equals: CountryContinent
  in: [CountryContinent]
  not: NestedEnumCountryContinentWithAggregatesFilter
  notIn: [CountryContinent]
}

input NestedEnumCountryLanguageIsOfficialFilter {
  equals: CountryLanguageIsOfficial
  in: [CountryLanguageIsOfficial]
  not: NestedEnumCountryLanguageIsOfficialFilter
  notIn: [CountryLanguageIsOfficial]
}

input NestedEnumCountryLanguageIsOfficialWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumCountryLanguageIsOfficialFilter
  _min: NestedEnumCountryLanguageIsOfficialFilter
  equals: CountryLanguageIsOfficial
  in: [CountryLanguageIsOfficial]
  not: NestedEnumCountryLanguageIsOfficialWithAggregatesFilter
  notIn: [CountryLanguageIsOfficial]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedJsonFilter {
  array_contains: Json
  array_ends_with: Json
  array_starts_with: Json
  equals: Json
  gt: Json
  gte: Json
  lt: Json
  lte: Json
  not: Json
  path: String
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableDecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  aggregateCity(
    cursor: CityWhereUniqueInput
    orderBy: [CityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: CityWhereInput
  ): AggregateCity
  findFirstCity(
    cursor: CityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [CityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: CityWhereInput
  ): City
  findFirstUser(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum]
    orderBy: [UserOrderByWithRelationInput]
    skip: Int
    take: Int
    where: UserWhereInput
  ): User
  findManyCity(
    cursor: CityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [CityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: CityWhereInput
  ): [City!]!
  findManyCityCount(
    cursor: CityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [CityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: CityWhereInput
  ): Int!
  findManyUser(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum]
    orderBy: [UserOrderByWithRelationInput]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!
  findManyUserCount(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum]
    orderBy: [UserOrderByWithRelationInput]
    skip: Int
    take: Int
    where: UserWhereInput
  ): Int!
  findUniqueCity(where: CityWhereUniqueInput!): City
  findUniqueUser(where: UserWhereUniqueInput!): User
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

"""
This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
"""
type User {
  createdAt: DateTime!
  email: String!
  id: String!
  isActive: Boolean!
  password: Void!
  roles: Void!
  updatedAt: DateTime
  username: String!
}

type UserCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  isActive: Int!
  password: Void!
  roles: Void!
  updatedAt: Int!
  username: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isActive: SortOrder
  password: Void
  roles: Void
  updatedAt: SortOrder
  username: SortOrder
}

input UserCreateInput {
  createdAt: Void
  email: String!
  id: Void
  isActive: Boolean
  password: String!
  roles: Void
  updatedAt: DateTime
  username: String!
}

input UserCreateManyInput {
  createdAt: Void
  email: String!
  id: Void
  isActive: Boolean
  password: String!
  roles: Void
  updatedAt: DateTime
  username: String!
}

type UserGroupByOutputType {
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
  createdAt: DateTime!
  email: String!
  id: String!
  isActive: Boolean!
  password: Void!
  roles: Void!
  updatedAt: DateTime
  username: String!
}

type UserMaxAggregateOutputType {
  createdAt: DateTime
  email: String
  id: String
  isActive: Boolean
  password: Void
  updatedAt: DateTime
  username: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isActive: SortOrder
  password: Void
  updatedAt: SortOrder
  username: SortOrder
}

type UserMinAggregateOutputType {
  createdAt: DateTime
  email: String
  id: String
  isActive: Boolean
  password: Void
  updatedAt: DateTime
  username: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isActive: SortOrder
  password: Void
  updatedAt: SortOrder
  username: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isActive: SortOrder
  password: Void
  roles: Void
  updatedAt: SortOrderInput
  username: SortOrder
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isActive: SortOrder
  password: Void
  roles: Void
  updatedAt: SortOrderInput
  username: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  isActive
  password
  roles
  updatedAt
  username
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  password: Void
  roles: Void
  updatedAt: DateTimeNullableWithAggregatesFilter
  username: StringWithAggregatesFilter
}

input UserUncheckedCreateInput {
  createdAt: Void
  email: String!
  id: Void
  isActive: Boolean
  password: String!
  roles: Void
  updatedAt: DateTime
  username: String!
}

input UserUncheckedUpdateInput {
  createdAt: Void
  email: StringFieldUpdateOperationsInput
  id: Void
  isActive: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  roles: Void
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  createdAt: Void
  email: StringFieldUpdateOperationsInput
  id: Void
  isActive: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  roles: Void
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateInput {
  createdAt: Void
  email: StringFieldUpdateOperationsInput
  id: Void
  isActive: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  roles: Void
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: Void
  email: StringFieldUpdateOperationsInput
  id: Void
  isActive: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  roles: Void
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  isActive: BoolFilter
  password: Void
  roles: Void
  updatedAt: DateTimeNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  createdAt: DateTimeFilter
  email: String
  id: String
  isActive: BoolFilter
  password: Void
  roles: Void
  updatedAt: DateTimeNullableFilter
  username: String
}

"""
Represents NULL values
"""
scalar Void
