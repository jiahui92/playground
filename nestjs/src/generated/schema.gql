### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AggregateCity {
  _avg: CityAvgAggregateOutputType
  _count: CityCountAggregateOutputType
  _max: CityMaxAggregateOutputType
  _min: CityMinAggregateOutputType
  _sum: CitySumAggregateOutputType
}

type AggregateCountry {
  _avg: CountryAvgAggregateOutputType
  _count: CountryCountAggregateOutputType
  _max: CountryMaxAggregateOutputType
  _min: CountryMinAggregateOutputType
  _sum: CountrySumAggregateOutputType
}

type AggregateCountrylanguage {
  _avg: CountrylanguageAvgAggregateOutputType
  _count: CountrylanguageCountAggregateOutputType
  _max: CountrylanguageMaxAggregateOutputType
  _min: CountrylanguageMinAggregateOutputType
  _sum: CountrylanguageSumAggregateOutputType
}

type BatchPayload {
  count: Int
}

type CityAvgAggregateOutputType {
  ID: Float
  Population: Float
}

type CityCountAggregateOutputType {
  CountryCode: Int!
  District: Int!
  ID: Int!
  Name: Int!
  Population: Int!
  _all: Int!
}

type CityGroupByOutputType {
  CountryCode: String!
  District: String!
  ID: Int!
  Name: String!
  Population: Int!
  _avg: CityAvgAggregateOutputType
  _count: CityCountAggregateOutputType
  _max: CityMaxAggregateOutputType
  _min: CityMinAggregateOutputType
  _sum: CitySumAggregateOutputType
}

input CityListRelationFilter {
  every: cityWhereInput
  none: cityWhereInput
  some: cityWhereInput
}

type CityMaxAggregateOutputType {
  CountryCode: String
  District: String
  ID: Int
  Name: String
  Population: Int
}

type CityMinAggregateOutputType {
  CountryCode: String
  District: String
  ID: Int
  Name: String
  Population: Int
}

enum CityScalarFieldEnum {
  CountryCode
  District
  ID
  Name
  Population
}

type CitySumAggregateOutputType {
  ID: Int
  Population: Int
}

type CountryAvgAggregateOutputType {
  Capital: Float
  GNP: Decimal
  GNPOld: Decimal
  IndepYear: Float
  LifeExpectancy: Decimal
  Population: Float
  SurfaceArea: Decimal
}

type CountryCountAggregateOutputType {
  Capital: Int!
  Code: Int!
  Code2: Int!
  Continent: Int!
  GNP: Int!
  GNPOld: Int!
  GovernmentForm: Int!
  HeadOfState: Int!
  IndepYear: Int!
  LifeExpectancy: Int!
  LocalName: Int!
  Name: Int!
  Population: Int!
  Region: Int!
  SurfaceArea: Int!
  _all: Int!
}

type CountryCountOutputType {
  city: Int!
  countrylanguage: Int!
}

type CountryGroupByOutputType {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent!
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int!
  Region: String!
  SurfaceArea: Decimal!
  _avg: CountryAvgAggregateOutputType
  _count: CountryCountAggregateOutputType
  _max: CountryMaxAggregateOutputType
  _min: CountryMinAggregateOutputType
  _sum: CountrySumAggregateOutputType
}

type CountryMaxAggregateOutputType {
  Capital: Int
  Code: String
  Code2: String
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String
  Name: String
  Population: Int
  Region: String
  SurfaceArea: Decimal
}

type CountryMinAggregateOutputType {
  Capital: Int
  Code: String
  Code2: String
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String
  Name: String
  Population: Int
  Region: String
  SurfaceArea: Decimal
}

input CountryRelationFilter {
  is: countryWhereInput
  isNot: countryWhereInput
}

enum CountryScalarFieldEnum {
  Capital
  Code
  Code2
  Continent
  GNP
  GNPOld
  GovernmentForm
  HeadOfState
  IndepYear
  LifeExpectancy
  LocalName
  Name
  Population
  Region
  SurfaceArea
}

type CountrySumAggregateOutputType {
  Capital: Int
  GNP: Decimal
  GNPOld: Decimal
  IndepYear: Int
  LifeExpectancy: Decimal
  Population: Int
  SurfaceArea: Decimal
}

type CountrylanguageAvgAggregateOutputType {
  Percentage: Decimal
}

type CountrylanguageCountAggregateOutputType {
  CountryCode: Int!
  IsOfficial: Int!
  Language: Int!
  Percentage: Int!
  _all: Int!
}

type CountrylanguageGroupByOutputType {
  CountryCode: String!
  IsOfficial: countrylanguage_IsOfficial!
  Language: String!
  Percentage: Decimal!
  _avg: CountrylanguageAvgAggregateOutputType
  _count: CountrylanguageCountAggregateOutputType
  _max: CountrylanguageMaxAggregateOutputType
  _min: CountrylanguageMinAggregateOutputType
  _sum: CountrylanguageSumAggregateOutputType
}

input CountrylanguageListRelationFilter {
  every: countrylanguageWhereInput
  none: countrylanguageWhereInput
  some: countrylanguageWhereInput
}

type CountrylanguageMaxAggregateOutputType {
  CountryCode: String
  IsOfficial: countrylanguage_IsOfficial
  Language: String
  Percentage: Decimal
}

type CountrylanguageMinAggregateOutputType {
  CountryCode: String
  IsOfficial: countrylanguage_IsOfficial
  Language: String
  Percentage: Decimal
}

enum CountrylanguageScalarFieldEnum {
  CountryCode
  IsOfficial
  Language
  Percentage
}

type CountrylanguageSumAggregateOutputType {
  Percentage: Decimal
}

scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal]
}

input DecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal]
}

input DecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal]
}

input Enumcountry_ContinentFieldUpdateOperationsInput {
  set: country_Continent
}

input Enumcountry_ContinentFilter {
  equals: country_Continent
  in: [country_Continent]
  not: NestedEnumcountry_ContinentFilter
  notIn: [country_Continent]
}

input Enumcountry_ContinentWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumcountry_ContinentFilter
  _min: NestedEnumcountry_ContinentFilter
  equals: country_Continent
  in: [country_Continent]
  not: NestedEnumcountry_ContinentWithAggregatesFilter
  notIn: [country_Continent]
}

input Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput {
  set: countrylanguage_IsOfficial
}

input Enumcountrylanguage_IsOfficialFilter {
  equals: countrylanguage_IsOfficial
  in: [countrylanguage_IsOfficial]
  not: NestedEnumcountrylanguage_IsOfficialFilter
  notIn: [countrylanguage_IsOfficial]
}

input Enumcountrylanguage_IsOfficialWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumcountrylanguage_IsOfficialFilter
  _min: NestedEnumcountrylanguage_IsOfficialFilter
  equals: countrylanguage_IsOfficial
  in: [countrylanguage_IsOfficial]
  not: NestedEnumcountrylanguage_IsOfficialWithAggregatesFilter
  notIn: [countrylanguage_IsOfficial]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

type Mutation {
  createOneCity(data: cityCreateInput!): city!
  createOneCountry(data: countryCreateInput!): country!
  createOneCountrylanguage(data: countrylanguageCreateInput!): countrylanguage!
  deleteManyCity(where: cityWhereInput): BatchPayload!
  deleteManyCountry(where: countryWhereInput): BatchPayload!
  deleteManyCountrylanguage(where: countrylanguageWhereInput): BatchPayload!
  deleteOneCity(where: cityWhereUniqueInput!): city
  deleteOneCountry(where: countryWhereUniqueInput!): country
  deleteOneCountrylanguage(
    where: countrylanguageWhereUniqueInput!
  ): countrylanguage
  updateManyCity(
    data: cityUpdateManyMutationInput!
    where: cityWhereInput
  ): BatchPayload!
  updateManyCountry(
    data: countryUpdateManyMutationInput!
    where: countryWhereInput
  ): BatchPayload!
  updateManyCountrylanguage(
    data: countrylanguageUpdateManyMutationInput!
    where: countrylanguageWhereInput
  ): BatchPayload!
  updateOneCity(data: cityUpdateInput!, where: cityWhereUniqueInput!): city!
  updateOneCountry(
    data: countryUpdateInput!
    where: countryWhereUniqueInput!
  ): country!
  updateOneCountrylanguage(
    data: countrylanguageUpdateInput!
    where: countrylanguageWhereUniqueInput!
  ): countrylanguage!
  upsertOneCity(
    create: cityCreateInput!
    update: cityUpdateInput!
    where: cityWhereUniqueInput!
  ): city!
  upsertOneCountry(
    create: countryCreateInput!
    update: countryUpdateInput!
    where: countryWhereUniqueInput!
  ): country!
  upsertOneCountrylanguage(
    create: countrylanguageCreateInput!
    update: countrylanguageUpdateInput!
    where: countrylanguageWhereUniqueInput!
  ): countrylanguage!
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal]
}

input NestedDecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal]
}

input NestedDecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal]
}

input NestedEnumcountry_ContinentFilter {
  equals: country_Continent
  in: [country_Continent]
  not: NestedEnumcountry_ContinentFilter
  notIn: [country_Continent]
}

input NestedEnumcountry_ContinentWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumcountry_ContinentFilter
  _min: NestedEnumcountry_ContinentFilter
  equals: country_Continent
  in: [country_Continent]
  not: NestedEnumcountry_ContinentWithAggregatesFilter
  notIn: [country_Continent]
}

input NestedEnumcountrylanguage_IsOfficialFilter {
  equals: countrylanguage_IsOfficial
  in: [countrylanguage_IsOfficial]
  not: NestedEnumcountrylanguage_IsOfficialFilter
  notIn: [countrylanguage_IsOfficial]
}

input NestedEnumcountrylanguage_IsOfficialWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumcountrylanguage_IsOfficialFilter
  _min: NestedEnumcountrylanguage_IsOfficialFilter
  equals: countrylanguage_IsOfficial
  in: [countrylanguage_IsOfficial]
  not: NestedEnumcountrylanguage_IsOfficialWithAggregatesFilter
  notIn: [countrylanguage_IsOfficial]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableDecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  aggregateCity(
    cursor: cityWhereUniqueInput
    orderBy: [cityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: cityWhereInput
  ): AggregateCity
  aggregateCountry(
    cursor: countryWhereUniqueInput
    orderBy: [countryOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countryWhereInput
  ): AggregateCountry
  aggregateCountrylanguage(
    cursor: countrylanguageWhereUniqueInput
    orderBy: [countrylanguageOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countrylanguageWhereInput
  ): AggregateCountrylanguage
  findFirstCity(
    cursor: cityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [cityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: cityWhereInput
  ): city
  findFirstCountry(
    cursor: countryWhereUniqueInput
    distinct: [CountryScalarFieldEnum]
    orderBy: [countryOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countryWhereInput
  ): country
  findFirstCountrylanguage(
    cursor: countrylanguageWhereUniqueInput
    distinct: [CountrylanguageScalarFieldEnum]
    orderBy: [countrylanguageOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countrylanguageWhereInput
  ): countrylanguage
  findManyCity(
    cursor: cityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [cityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: cityWhereInput
  ): [city!]!
  findManyCityCount(
    cursor: cityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [cityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: cityWhereInput
  ): Int!
  findManyCountry(
    cursor: countryWhereUniqueInput
    distinct: [CountryScalarFieldEnum]
    orderBy: [countryOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countryWhereInput
  ): [country!]!
  findManyCountryCount(
    cursor: countryWhereUniqueInput
    distinct: [CountryScalarFieldEnum]
    orderBy: [countryOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countryWhereInput
  ): Int!
  findManyCountrylanguage(
    cursor: countrylanguageWhereUniqueInput
    distinct: [CountrylanguageScalarFieldEnum]
    orderBy: [countrylanguageOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countrylanguageWhereInput
  ): [countrylanguage!]!
  findManyCountrylanguageCount(
    cursor: countrylanguageWhereUniqueInput
    distinct: [CountrylanguageScalarFieldEnum]
    orderBy: [countrylanguageOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countrylanguageWhereInput
  ): Int!
  findUniqueCity(where: cityWhereUniqueInput!): city
  findUniqueCountry(where: countryWhereUniqueInput!): country
  findUniqueCountrylanguage(
    where: countrylanguageWhereUniqueInput!
  ): countrylanguage
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

type city {
  CountryCode: String!
  District: String!
  ID: Int!
  Name: String!
  Population: Int!
  country: country!
}

input cityAvgOrderByAggregateInput {
  ID: SortOrder
  Population: SortOrder
}

input cityCountOrderByAggregateInput {
  CountryCode: SortOrder
  District: SortOrder
  ID: SortOrder
  Name: SortOrder
  Population: SortOrder
}

input cityCreateInput {
  District: String!
  Name: String!
  Population: Int
  country: countryCreateNestedOneWithoutCityInput!
}

input cityCreateManyCountryInput {
  District: String!
  ID: Int
  Name: String!
  Population: Int
}

input cityCreateManyCountryInputEnvelope {
  data: cityCreateManyCountryInput!
  skipDuplicates: Boolean
}

input cityCreateManyInput {
  CountryCode: String!
  District: String!
  ID: Int
  Name: String!
  Population: Int
}

input cityCreateNestedManyWithoutCountryInput {
  connect: [cityWhereUniqueInput]
  connectOrCreate: [cityCreateOrConnectWithoutCountryInput]
  create: [cityCreateWithoutCountryInput]
  createMany: cityCreateManyCountryInputEnvelope
}

input cityCreateOrConnectWithoutCountryInput {
  create: cityCreateWithoutCountryInput!
  where: cityWhereUniqueInput!
}

input cityCreateWithoutCountryInput {
  District: String!
  Name: String!
  Population: Int
}

input cityMaxOrderByAggregateInput {
  CountryCode: SortOrder
  District: SortOrder
  ID: SortOrder
  Name: SortOrder
  Population: SortOrder
}

input cityMinOrderByAggregateInput {
  CountryCode: SortOrder
  District: SortOrder
  ID: SortOrder
  Name: SortOrder
  Population: SortOrder
}

input cityOrderByRelationAggregateInput {
  _count: SortOrder
}

input cityOrderByWithAggregationInput {
  CountryCode: SortOrder
  District: SortOrder
  ID: SortOrder
  Name: SortOrder
  Population: SortOrder
  _avg: cityAvgOrderByAggregateInput
  _count: cityCountOrderByAggregateInput
  _max: cityMaxOrderByAggregateInput
  _min: cityMinOrderByAggregateInput
  _sum: citySumOrderByAggregateInput
}

input cityOrderByWithRelationInput {
  CountryCode: SortOrder
  District: SortOrder
  ID: SortOrder
  Name: SortOrder
  Population: SortOrder
  country: countryOrderByWithRelationInput
}

input cityScalarWhereInput {
  AND: [cityScalarWhereInput]
  CountryCode: StringFilter
  District: StringFilter
  ID: IntFilter
  NOT: [cityScalarWhereInput]
  Name: StringFilter
  OR: [cityScalarWhereInput]
  Population: IntFilter
}

input cityScalarWhereWithAggregatesInput {
  AND: [cityScalarWhereWithAggregatesInput]
  CountryCode: StringWithAggregatesFilter
  District: StringWithAggregatesFilter
  ID: IntWithAggregatesFilter
  NOT: [cityScalarWhereWithAggregatesInput]
  Name: StringWithAggregatesFilter
  OR: [cityScalarWhereWithAggregatesInput]
  Population: IntWithAggregatesFilter
}

input citySumOrderByAggregateInput {
  ID: SortOrder
  Population: SortOrder
}

input cityUncheckedCreateInput {
  CountryCode: String!
  District: String!
  ID: Int
  Name: String!
  Population: Int
}

input cityUncheckedCreateNestedManyWithoutCountryInput {
  connect: [cityWhereUniqueInput]
  connectOrCreate: [cityCreateOrConnectWithoutCountryInput]
  create: [cityCreateWithoutCountryInput]
  createMany: cityCreateManyCountryInputEnvelope
}

input cityUncheckedCreateWithoutCountryInput {
  District: String!
  ID: Int
  Name: String!
  Population: Int
}

input cityUncheckedUpdateInput {
  CountryCode: StringFieldUpdateOperationsInput
  District: StringFieldUpdateOperationsInput
  ID: IntFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
}

input cityUncheckedUpdateManyInput {
  CountryCode: StringFieldUpdateOperationsInput
  District: StringFieldUpdateOperationsInput
  ID: IntFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
}

input cityUncheckedUpdateManyWithoutCountryInput {
  District: StringFieldUpdateOperationsInput
  ID: IntFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
}

input cityUncheckedUpdateManyWithoutCountryNestedInput {
  connect: [cityWhereUniqueInput]
  connectOrCreate: [cityCreateOrConnectWithoutCountryInput]
  create: [cityCreateWithoutCountryInput]
  createMany: cityCreateManyCountryInputEnvelope
  delete: [cityWhereUniqueInput]
  deleteMany: [cityScalarWhereInput]
  disconnect: [cityWhereUniqueInput]
  set: [cityWhereUniqueInput]
  update: [cityUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [cityUpdateManyWithWhereWithoutCountryInput]
  upsert: [cityUpsertWithWhereUniqueWithoutCountryInput]
}

input cityUncheckedUpdateWithoutCountryInput {
  District: StringFieldUpdateOperationsInput
  ID: IntFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
}

input cityUpdateInput {
  District: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  country: countryUpdateOneRequiredWithoutCityNestedInput
}

input cityUpdateManyMutationInput {
  District: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
}

input cityUpdateManyWithWhereWithoutCountryInput {
  data: cityUpdateManyMutationInput!
  where: cityScalarWhereInput!
}

input cityUpdateManyWithoutCountryNestedInput {
  connect: [cityWhereUniqueInput]
  connectOrCreate: [cityCreateOrConnectWithoutCountryInput]
  create: [cityCreateWithoutCountryInput]
  createMany: cityCreateManyCountryInputEnvelope
  delete: [cityWhereUniqueInput]
  deleteMany: [cityScalarWhereInput]
  disconnect: [cityWhereUniqueInput]
  set: [cityWhereUniqueInput]
  update: [cityUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [cityUpdateManyWithWhereWithoutCountryInput]
  upsert: [cityUpsertWithWhereUniqueWithoutCountryInput]
}

input cityUpdateWithWhereUniqueWithoutCountryInput {
  data: cityUpdateWithoutCountryInput!
  where: cityWhereUniqueInput!
}

input cityUpdateWithoutCountryInput {
  District: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
}

input cityUpsertWithWhereUniqueWithoutCountryInput {
  create: cityCreateWithoutCountryInput!
  update: cityUpdateWithoutCountryInput!
  where: cityWhereUniqueInput!
}

input cityWhereInput {
  AND: [cityWhereInput]
  CountryCode: StringFilter
  District: StringFilter
  ID: IntFilter
  NOT: [cityWhereInput]
  Name: StringFilter
  OR: [cityWhereInput]
  Population: IntFilter
  country: CountryRelationFilter
}

input cityWhereUniqueInput {
  AND: [cityWhereInput]
  CountryCode: StringFilter
  District: StringFilter
  ID: Int
  NOT: [cityWhereInput]
  Name: StringFilter
  OR: [cityWhereInput]
  Population: IntFilter
  country: CountryRelationFilter
}

type country {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent!
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int!
  Region: String!
  SurfaceArea: Decimal!
  _count: CountryCountOutputType!
  city(
    cursor: cityWhereUniqueInput
    distinct: [CityScalarFieldEnum]
    orderBy: [cityOrderByWithRelationInput]
    skip: Int
    take: Int
    where: cityWhereInput
  ): [city!]!
  countrylanguage(
    cursor: countrylanguageWhereUniqueInput
    distinct: [CountrylanguageScalarFieldEnum]
    orderBy: [countrylanguageOrderByWithRelationInput]
    skip: Int
    take: Int
    where: countrylanguageWhereInput
  ): [countrylanguage!]!
}

input countryAvgOrderByAggregateInput {
  Capital: SortOrder
  GNP: SortOrder
  GNPOld: SortOrder
  IndepYear: SortOrder
  LifeExpectancy: SortOrder
  Population: SortOrder
  SurfaceArea: SortOrder
}

input countryCountOrderByAggregateInput {
  Capital: SortOrder
  Code: SortOrder
  Code2: SortOrder
  Continent: SortOrder
  GNP: SortOrder
  GNPOld: SortOrder
  GovernmentForm: SortOrder
  HeadOfState: SortOrder
  IndepYear: SortOrder
  LifeExpectancy: SortOrder
  LocalName: SortOrder
  Name: SortOrder
  Population: SortOrder
  Region: SortOrder
  SurfaceArea: SortOrder
}

input countryCreateInput {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int
  Region: String!
  SurfaceArea: Decimal
  city: cityCreateNestedManyWithoutCountryInput
  countrylanguage: countrylanguageCreateNestedManyWithoutCountryInput
}

input countryCreateManyInput {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int
  Region: String!
  SurfaceArea: Decimal
}

input countryCreateNestedOneWithoutCityInput {
  connect: countryWhereUniqueInput
  connectOrCreate: countryCreateOrConnectWithoutCityInput
  create: countryCreateWithoutCityInput
}

input countryCreateNestedOneWithoutCountrylanguageInput {
  connect: countryWhereUniqueInput
  connectOrCreate: countryCreateOrConnectWithoutCountrylanguageInput
  create: countryCreateWithoutCountrylanguageInput
}

input countryCreateOrConnectWithoutCityInput {
  create: countryCreateWithoutCityInput!
  where: countryWhereUniqueInput!
}

input countryCreateOrConnectWithoutCountrylanguageInput {
  create: countryCreateWithoutCountrylanguageInput!
  where: countryWhereUniqueInput!
}

input countryCreateWithoutCityInput {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int
  Region: String!
  SurfaceArea: Decimal
  countrylanguage: countrylanguageCreateNestedManyWithoutCountryInput
}

input countryCreateWithoutCountrylanguageInput {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int
  Region: String!
  SurfaceArea: Decimal
  city: cityCreateNestedManyWithoutCountryInput
}

input countryMaxOrderByAggregateInput {
  Capital: SortOrder
  Code: SortOrder
  Code2: SortOrder
  Continent: SortOrder
  GNP: SortOrder
  GNPOld: SortOrder
  GovernmentForm: SortOrder
  HeadOfState: SortOrder
  IndepYear: SortOrder
  LifeExpectancy: SortOrder
  LocalName: SortOrder
  Name: SortOrder
  Population: SortOrder
  Region: SortOrder
  SurfaceArea: SortOrder
}

input countryMinOrderByAggregateInput {
  Capital: SortOrder
  Code: SortOrder
  Code2: SortOrder
  Continent: SortOrder
  GNP: SortOrder
  GNPOld: SortOrder
  GovernmentForm: SortOrder
  HeadOfState: SortOrder
  IndepYear: SortOrder
  LifeExpectancy: SortOrder
  LocalName: SortOrder
  Name: SortOrder
  Population: SortOrder
  Region: SortOrder
  SurfaceArea: SortOrder
}

input countryOrderByWithAggregationInput {
  Capital: SortOrderInput
  Code: SortOrder
  Code2: SortOrder
  Continent: SortOrder
  GNP: SortOrderInput
  GNPOld: SortOrderInput
  GovernmentForm: SortOrder
  HeadOfState: SortOrderInput
  IndepYear: SortOrderInput
  LifeExpectancy: SortOrderInput
  LocalName: SortOrder
  Name: SortOrder
  Population: SortOrder
  Region: SortOrder
  SurfaceArea: SortOrder
  _avg: countryAvgOrderByAggregateInput
  _count: countryCountOrderByAggregateInput
  _max: countryMaxOrderByAggregateInput
  _min: countryMinOrderByAggregateInput
  _sum: countrySumOrderByAggregateInput
}

input countryOrderByWithRelationInput {
  Capital: SortOrderInput
  Code: SortOrder
  Code2: SortOrder
  Continent: SortOrder
  GNP: SortOrderInput
  GNPOld: SortOrderInput
  GovernmentForm: SortOrder
  HeadOfState: SortOrderInput
  IndepYear: SortOrderInput
  LifeExpectancy: SortOrderInput
  LocalName: SortOrder
  Name: SortOrder
  Population: SortOrder
  Region: SortOrder
  SurfaceArea: SortOrder
  city: cityOrderByRelationAggregateInput
  countrylanguage: countrylanguageOrderByRelationAggregateInput
}

input countryScalarWhereWithAggregatesInput {
  AND: [countryScalarWhereWithAggregatesInput]
  Capital: IntNullableWithAggregatesFilter
  Code: StringWithAggregatesFilter
  Code2: StringWithAggregatesFilter
  Continent: Enumcountry_ContinentWithAggregatesFilter
  GNP: DecimalNullableWithAggregatesFilter
  GNPOld: DecimalNullableWithAggregatesFilter
  GovernmentForm: StringWithAggregatesFilter
  HeadOfState: StringNullableWithAggregatesFilter
  IndepYear: IntNullableWithAggregatesFilter
  LifeExpectancy: DecimalNullableWithAggregatesFilter
  LocalName: StringWithAggregatesFilter
  NOT: [countryScalarWhereWithAggregatesInput]
  Name: StringWithAggregatesFilter
  OR: [countryScalarWhereWithAggregatesInput]
  Population: IntWithAggregatesFilter
  Region: StringWithAggregatesFilter
  SurfaceArea: DecimalWithAggregatesFilter
}

input countrySumOrderByAggregateInput {
  Capital: SortOrder
  GNP: SortOrder
  GNPOld: SortOrder
  IndepYear: SortOrder
  LifeExpectancy: SortOrder
  Population: SortOrder
  SurfaceArea: SortOrder
}

input countryUncheckedCreateInput {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int
  Region: String!
  SurfaceArea: Decimal
  city: cityUncheckedCreateNestedManyWithoutCountryInput
  countrylanguage: countrylanguageUncheckedCreateNestedManyWithoutCountryInput
}

input countryUncheckedCreateWithoutCityInput {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int
  Region: String!
  SurfaceArea: Decimal
  countrylanguage: countrylanguageUncheckedCreateNestedManyWithoutCountryInput
}

input countryUncheckedCreateWithoutCountrylanguageInput {
  Capital: Int
  Code: String!
  Code2: String!
  Continent: country_Continent
  GNP: Decimal
  GNPOld: Decimal
  GovernmentForm: String!
  HeadOfState: String
  IndepYear: Int
  LifeExpectancy: Decimal
  LocalName: String!
  Name: String!
  Population: Int
  Region: String!
  SurfaceArea: Decimal
  city: cityUncheckedCreateNestedManyWithoutCountryInput
}

input countryUncheckedUpdateInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
  city: cityUncheckedUpdateManyWithoutCountryNestedInput
  countrylanguage: countrylanguageUncheckedUpdateManyWithoutCountryNestedInput
}

input countryUncheckedUpdateManyInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
}

input countryUncheckedUpdateWithoutCityInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
  countrylanguage: countrylanguageUncheckedUpdateManyWithoutCountryNestedInput
}

input countryUncheckedUpdateWithoutCountrylanguageInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
  city: cityUncheckedUpdateManyWithoutCountryNestedInput
}

input countryUpdateInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
  city: cityUpdateManyWithoutCountryNestedInput
  countrylanguage: countrylanguageUpdateManyWithoutCountryNestedInput
}

input countryUpdateManyMutationInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
}

input countryUpdateOneRequiredWithoutCityNestedInput {
  connect: countryWhereUniqueInput
  connectOrCreate: countryCreateOrConnectWithoutCityInput
  create: countryCreateWithoutCityInput
  update: countryUpdateToOneWithWhereWithoutCityInput
  upsert: countryUpsertWithoutCityInput
}

input countryUpdateOneRequiredWithoutCountrylanguageNestedInput {
  connect: countryWhereUniqueInput
  connectOrCreate: countryCreateOrConnectWithoutCountrylanguageInput
  create: countryCreateWithoutCountrylanguageInput
  update: countryUpdateToOneWithWhereWithoutCountrylanguageInput
  upsert: countryUpsertWithoutCountrylanguageInput
}

input countryUpdateToOneWithWhereWithoutCityInput {
  data: countryUpdateWithoutCityInput!
  where: countryWhereInput
}

input countryUpdateToOneWithWhereWithoutCountrylanguageInput {
  data: countryUpdateWithoutCountrylanguageInput!
  where: countryWhereInput
}

input countryUpdateWithoutCityInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
  countrylanguage: countrylanguageUpdateManyWithoutCountryNestedInput
}

input countryUpdateWithoutCountrylanguageInput {
  Capital: NullableIntFieldUpdateOperationsInput
  Code: StringFieldUpdateOperationsInput
  Code2: StringFieldUpdateOperationsInput
  Continent: Enumcountry_ContinentFieldUpdateOperationsInput
  GNP: NullableDecimalFieldUpdateOperationsInput
  GNPOld: NullableDecimalFieldUpdateOperationsInput
  GovernmentForm: StringFieldUpdateOperationsInput
  HeadOfState: NullableStringFieldUpdateOperationsInput
  IndepYear: NullableIntFieldUpdateOperationsInput
  LifeExpectancy: NullableDecimalFieldUpdateOperationsInput
  LocalName: StringFieldUpdateOperationsInput
  Name: StringFieldUpdateOperationsInput
  Population: IntFieldUpdateOperationsInput
  Region: StringFieldUpdateOperationsInput
  SurfaceArea: DecimalFieldUpdateOperationsInput
  city: cityUpdateManyWithoutCountryNestedInput
}

input countryUpsertWithoutCityInput {
  create: countryCreateWithoutCityInput!
  update: countryUpdateWithoutCityInput!
  where: countryWhereInput
}

input countryUpsertWithoutCountrylanguageInput {
  create: countryCreateWithoutCountrylanguageInput!
  update: countryUpdateWithoutCountrylanguageInput!
  where: countryWhereInput
}

input countryWhereInput {
  AND: [countryWhereInput]
  Capital: IntNullableFilter
  Code: StringFilter
  Code2: StringFilter
  Continent: Enumcountry_ContinentFilter
  GNP: DecimalNullableFilter
  GNPOld: DecimalNullableFilter
  GovernmentForm: StringFilter
  HeadOfState: StringNullableFilter
  IndepYear: IntNullableFilter
  LifeExpectancy: DecimalNullableFilter
  LocalName: StringFilter
  NOT: [countryWhereInput]
  Name: StringFilter
  OR: [countryWhereInput]
  Population: IntFilter
  Region: StringFilter
  SurfaceArea: DecimalFilter
  city: CityListRelationFilter
  countrylanguage: CountrylanguageListRelationFilter
}

input countryWhereUniqueInput {
  AND: [countryWhereInput]
  Capital: IntNullableFilter
  Code: String
  Code2: StringFilter
  Continent: Enumcountry_ContinentFilter
  GNP: DecimalNullableFilter
  GNPOld: DecimalNullableFilter
  GovernmentForm: StringFilter
  HeadOfState: StringNullableFilter
  IndepYear: IntNullableFilter
  LifeExpectancy: DecimalNullableFilter
  LocalName: StringFilter
  NOT: [countryWhereInput]
  Name: StringFilter
  OR: [countryWhereInput]
  Population: IntFilter
  Region: StringFilter
  SurfaceArea: DecimalFilter
  city: CityListRelationFilter
  countrylanguage: CountrylanguageListRelationFilter
}

enum country_Continent {
  Africa
  Antarctica
  Asia
  Europe
  North_America
  Oceania
  South_America
}

type countrylanguage {
  CountryCode: String!
  IsOfficial: countrylanguage_IsOfficial!
  Language: String!
  Percentage: Decimal!
  country: country!
}

input countrylanguageAvgOrderByAggregateInput {
  Percentage: SortOrder
}

input countrylanguageCountOrderByAggregateInput {
  CountryCode: SortOrder
  IsOfficial: SortOrder
  Language: SortOrder
  Percentage: SortOrder
}

input countrylanguageCountryCodeLanguageCompoundUniqueInput {
  CountryCode: String!
  Language: String!
}

input countrylanguageCreateInput {
  IsOfficial: countrylanguage_IsOfficial
  Language: String!
  Percentage: Decimal
  country: countryCreateNestedOneWithoutCountrylanguageInput!
}

input countrylanguageCreateManyCountryInput {
  IsOfficial: countrylanguage_IsOfficial
  Language: String!
  Percentage: Decimal
}

input countrylanguageCreateManyCountryInputEnvelope {
  data: countrylanguageCreateManyCountryInput!
  skipDuplicates: Boolean
}

input countrylanguageCreateManyInput {
  CountryCode: String!
  IsOfficial: countrylanguage_IsOfficial
  Language: String!
  Percentage: Decimal
}

input countrylanguageCreateNestedManyWithoutCountryInput {
  connect: [countrylanguageWhereUniqueInput]
  connectOrCreate: [countrylanguageCreateOrConnectWithoutCountryInput]
  create: [countrylanguageCreateWithoutCountryInput]
  createMany: countrylanguageCreateManyCountryInputEnvelope
}

input countrylanguageCreateOrConnectWithoutCountryInput {
  create: countrylanguageCreateWithoutCountryInput!
  where: countrylanguageWhereUniqueInput!
}

input countrylanguageCreateWithoutCountryInput {
  IsOfficial: countrylanguage_IsOfficial
  Language: String!
  Percentage: Decimal
}

input countrylanguageMaxOrderByAggregateInput {
  CountryCode: SortOrder
  IsOfficial: SortOrder
  Language: SortOrder
  Percentage: SortOrder
}

input countrylanguageMinOrderByAggregateInput {
  CountryCode: SortOrder
  IsOfficial: SortOrder
  Language: SortOrder
  Percentage: SortOrder
}

input countrylanguageOrderByRelationAggregateInput {
  _count: SortOrder
}

input countrylanguageOrderByWithAggregationInput {
  CountryCode: SortOrder
  IsOfficial: SortOrder
  Language: SortOrder
  Percentage: SortOrder
  _avg: countrylanguageAvgOrderByAggregateInput
  _count: countrylanguageCountOrderByAggregateInput
  _max: countrylanguageMaxOrderByAggregateInput
  _min: countrylanguageMinOrderByAggregateInput
  _sum: countrylanguageSumOrderByAggregateInput
}

input countrylanguageOrderByWithRelationInput {
  CountryCode: SortOrder
  IsOfficial: SortOrder
  Language: SortOrder
  Percentage: SortOrder
  country: countryOrderByWithRelationInput
}

input countrylanguageScalarWhereInput {
  AND: [countrylanguageScalarWhereInput]
  CountryCode: StringFilter
  IsOfficial: Enumcountrylanguage_IsOfficialFilter
  Language: StringFilter
  NOT: [countrylanguageScalarWhereInput]
  OR: [countrylanguageScalarWhereInput]
  Percentage: DecimalFilter
}

input countrylanguageScalarWhereWithAggregatesInput {
  AND: [countrylanguageScalarWhereWithAggregatesInput]
  CountryCode: StringWithAggregatesFilter
  IsOfficial: Enumcountrylanguage_IsOfficialWithAggregatesFilter
  Language: StringWithAggregatesFilter
  NOT: [countrylanguageScalarWhereWithAggregatesInput]
  OR: [countrylanguageScalarWhereWithAggregatesInput]
  Percentage: DecimalWithAggregatesFilter
}

input countrylanguageSumOrderByAggregateInput {
  Percentage: SortOrder
}

input countrylanguageUncheckedCreateInput {
  CountryCode: String!
  IsOfficial: countrylanguage_IsOfficial
  Language: String!
  Percentage: Decimal
}

input countrylanguageUncheckedCreateNestedManyWithoutCountryInput {
  connect: [countrylanguageWhereUniqueInput]
  connectOrCreate: [countrylanguageCreateOrConnectWithoutCountryInput]
  create: [countrylanguageCreateWithoutCountryInput]
  createMany: countrylanguageCreateManyCountryInputEnvelope
}

input countrylanguageUncheckedCreateWithoutCountryInput {
  IsOfficial: countrylanguage_IsOfficial
  Language: String!
  Percentage: Decimal
}

input countrylanguageUncheckedUpdateInput {
  CountryCode: StringFieldUpdateOperationsInput
  IsOfficial: Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput
  Language: StringFieldUpdateOperationsInput
  Percentage: DecimalFieldUpdateOperationsInput
}

input countrylanguageUncheckedUpdateManyInput {
  CountryCode: StringFieldUpdateOperationsInput
  IsOfficial: Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput
  Language: StringFieldUpdateOperationsInput
  Percentage: DecimalFieldUpdateOperationsInput
}

input countrylanguageUncheckedUpdateManyWithoutCountryInput {
  IsOfficial: Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput
  Language: StringFieldUpdateOperationsInput
  Percentage: DecimalFieldUpdateOperationsInput
}

input countrylanguageUncheckedUpdateManyWithoutCountryNestedInput {
  connect: [countrylanguageWhereUniqueInput]
  connectOrCreate: [countrylanguageCreateOrConnectWithoutCountryInput]
  create: [countrylanguageCreateWithoutCountryInput]
  createMany: countrylanguageCreateManyCountryInputEnvelope
  delete: [countrylanguageWhereUniqueInput]
  deleteMany: [countrylanguageScalarWhereInput]
  disconnect: [countrylanguageWhereUniqueInput]
  set: [countrylanguageWhereUniqueInput]
  update: [countrylanguageUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [countrylanguageUpdateManyWithWhereWithoutCountryInput]
  upsert: [countrylanguageUpsertWithWhereUniqueWithoutCountryInput]
}

input countrylanguageUncheckedUpdateWithoutCountryInput {
  IsOfficial: Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput
  Language: StringFieldUpdateOperationsInput
  Percentage: DecimalFieldUpdateOperationsInput
}

input countrylanguageUpdateInput {
  IsOfficial: Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput
  Language: StringFieldUpdateOperationsInput
  Percentage: DecimalFieldUpdateOperationsInput
  country: countryUpdateOneRequiredWithoutCountrylanguageNestedInput
}

input countrylanguageUpdateManyMutationInput {
  IsOfficial: Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput
  Language: StringFieldUpdateOperationsInput
  Percentage: DecimalFieldUpdateOperationsInput
}

input countrylanguageUpdateManyWithWhereWithoutCountryInput {
  data: countrylanguageUpdateManyMutationInput!
  where: countrylanguageScalarWhereInput!
}

input countrylanguageUpdateManyWithoutCountryNestedInput {
  connect: [countrylanguageWhereUniqueInput]
  connectOrCreate: [countrylanguageCreateOrConnectWithoutCountryInput]
  create: [countrylanguageCreateWithoutCountryInput]
  createMany: countrylanguageCreateManyCountryInputEnvelope
  delete: [countrylanguageWhereUniqueInput]
  deleteMany: [countrylanguageScalarWhereInput]
  disconnect: [countrylanguageWhereUniqueInput]
  set: [countrylanguageWhereUniqueInput]
  update: [countrylanguageUpdateWithWhereUniqueWithoutCountryInput]
  updateMany: [countrylanguageUpdateManyWithWhereWithoutCountryInput]
  upsert: [countrylanguageUpsertWithWhereUniqueWithoutCountryInput]
}

input countrylanguageUpdateWithWhereUniqueWithoutCountryInput {
  data: countrylanguageUpdateWithoutCountryInput!
  where: countrylanguageWhereUniqueInput!
}

input countrylanguageUpdateWithoutCountryInput {
  IsOfficial: Enumcountrylanguage_IsOfficialFieldUpdateOperationsInput
  Language: StringFieldUpdateOperationsInput
  Percentage: DecimalFieldUpdateOperationsInput
}

input countrylanguageUpsertWithWhereUniqueWithoutCountryInput {
  create: countrylanguageCreateWithoutCountryInput!
  update: countrylanguageUpdateWithoutCountryInput!
  where: countrylanguageWhereUniqueInput!
}

input countrylanguageWhereInput {
  AND: [countrylanguageWhereInput]
  CountryCode: StringFilter
  IsOfficial: Enumcountrylanguage_IsOfficialFilter
  Language: StringFilter
  NOT: [countrylanguageWhereInput]
  OR: [countrylanguageWhereInput]
  Percentage: DecimalFilter
  country: CountryRelationFilter
}

input countrylanguageWhereUniqueInput {
  AND: [countrylanguageWhereInput]
  CountryCode: StringFilter
  CountryCode_Language: countrylanguageCountryCodeLanguageCompoundUniqueInput
  IsOfficial: Enumcountrylanguage_IsOfficialFilter
  Language: StringFilter
  NOT: [countrylanguageWhereInput]
  OR: [countrylanguageWhereInput]
  Percentage: DecimalFilter
  country: CountryRelationFilter
}

enum countrylanguage_IsOfficial {
  F
  T
}
